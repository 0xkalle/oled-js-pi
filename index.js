var five = require('johnny-five'),
    board = new five.Board();

var buffer = [];

var adafruitLogo = [
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x80, 0x80, 0xC0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xF8, 0xE0, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80,
0x80, 0x80, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0xFF,
0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00,
0x80, 0xFF, 0xFF, 0x80, 0x80, 0x00, 0x80, 0x80, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x80, 0x80,
0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x8C, 0x8E, 0x84, 0x00, 0x00, 0x80, 0xF8,
0xF8, 0xF8, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xF0, 0xE0, 0xE0, 0xC0, 0x80,
0x00, 0xE0, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0xFF, 0xC7, 0x01, 0x01,
0x01, 0x01, 0x83, 0xFF, 0xFF, 0x00, 0x00, 0x7C, 0xFE, 0xC7, 0x01, 0x01, 0x01, 0x01, 0x83, 0xFF,
0xFF, 0xFF, 0x00, 0x38, 0xFE, 0xC7, 0x83, 0x01, 0x01, 0x01, 0x83, 0xC7, 0xFF, 0xFF, 0x00, 0x00,
0x01, 0xFF, 0xFF, 0x01, 0x01, 0x00, 0xFF, 0xFF, 0x07, 0x01, 0x01, 0x01, 0x00, 0x00, 0x7F, 0xFF,
0x80, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x01, 0xFF,
0xFF, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x03, 0x0F, 0x3F, 0x7F, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE7, 0xC7, 0xC7, 0x8F,
0x8F, 0x9F, 0xBF, 0xFF, 0xFF, 0xC3, 0xC0, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFC, 0xFC, 0xFC,
0xFC, 0xFC, 0xFC, 0xFC, 0xFC, 0xF8, 0xF8, 0xF0, 0xF0, 0xE0, 0xC0, 0x00, 0x01, 0x03, 0x03, 0x03,
0x03, 0x03, 0x01, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x03, 0x03, 0x03, 0x01, 0x01,
0x03, 0x01, 0x00, 0x00, 0x00, 0x01, 0x03, 0x03, 0x03, 0x03, 0x01, 0x01, 0x03, 0x03, 0x00, 0x00,
0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x00, 0x00, 0x00, 0x01, 0x03, 0x01, 0x00, 0x00, 0x00, 0x03,
0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
];

var OLED = {};
OLED.HEIGHT = 32;
OLED.WIDTH = 128;
OLED.ADDRESS = 0x3C;
OLED.DISPLAY_OFF = 0xAE;
OLED.DISPLAY_ON = 0xAF;
OLED.SET_DISPLAY_CLOCK_DIV = 0xD5;
OLED.SET_MULTIPLEX = 0xA8;
OLED.SET_DISPLAY_OFFSET = 0xD3;
OLED.SET_START_LINE = 0x40;
OLED.CHARGE_PUMP = 0x8D;
OLED.EXTERNAL_VCC = false;
OLED.MEMORY_MODE = 0x20;
OLED.SEG_REMAP = 0xA0;
OLED.COM_SCAN_DEC = 0xC8;
OLED.SET_COM_PINS = 0xDA;
OLED.SET_CONTRAST = 0x81;
OLED.SET_PRECHARGE = 0xd9;
OLED.SET_VCOM_DETECT = 0xDB;
OLED.DISPLAY_ALL_ON_RESUME = 0xA4;
OLED.NORMAL_DISPLAY = 0xA6;
OLED.COLUMN_ADDR = 0x21;
OLED.PAGE_ADDR = 0x22;
OLED.INVERT_DISPLAY = 0xA7;

function drawPixel(x, y, color) {}

function sendI2CCmd(val) {
  // send control and actual val
  board.io.sendI2CWriteRequest(OLED.ADDRESS, [0x00, val]);
}

function init() {
  // enable i2C in firmata
  board.io.sendI2CConfig(0);

  var initSeq = [
    OLED.DISPLAY_OFF,
    OLED.SET_DISPLAY_CLOCK_DIV, 0x80,
    OLED.SET_MULTIPLEX, 0x1F,
    OLED.SET_DISPLAY_OFFSET, 0x00, // sets offset pro to 0
    OLED.SET_START_LINE,
    OLED.CHARGE_PUMP, 0x14, // charge pump val
    OLED.MEMORY_MODE, 0x00, // 0x0 act like ks0108
    OLED.SEG_REMAP,
    OLED.COM_SCAN_DEC,
    OLED.SET_COM_PINS, 0x02, // com pins val
    OLED.SET_CONTRAST, 0x8F, // contrast val
    OLED.SET_PRECHARGE, 0xF1, // precharge val
    OLED.SET_VCOM_DETECT, 0x40, // vcom detect
    OLED.DISPLAY_ALL_ON_RESUME,
    OLED.NORMAL_DISPLAY,
    OLED.DISPLAY_ON
  ];

  var i, initSeqLen = initSeq.length;

  for (i = 0; i < initSeqLen; i ++) {
    sendI2CCmd(initSeq[i]);
  }
}

// currently displaying back to front since switching from firmata.js to johnny-five
function display() {
  var displaySeq = [
    OLED.COLUMN_ADDR, 0, OLED.WIDTH - 1, // column start and end address 
    OLED.PAGE_ADDR, 0, 3 // page start and end address
  ];
  var i, displaySeqLen = displaySeq.length;

  for (i = 0; i < displaySeqLen; i ++) {
    sendI2CCmd(displaySeq[i]);
  }

  for (var col = 0; col < OLED.WIDTH; col ++) {
    for (var row = 0; row < OLED.HEIGHT / 8; row ++ ) {
      var index = (col * (OLED.HEIGHT / 8)) + row;
      board.io.sendI2CWriteRequest(OLED.ADDRESS, [0x40, buffer[index]]);
    }
  }
}

function clearDisplay() {
  buffer = new Buffer(buffer.length);
  buffer.fill(0);
  display();
}

board.on('ready', function() {
  console.log('I see you, board');
  
  // send setup sequence to OLED
  init();

  // display buffer
  buffer = adafruitLogo;
  display();

  // invert display
  //sendI2CCmd(OLED.INVERT_DISPLAY);

  // clear display
  //clearDisplay();

});  